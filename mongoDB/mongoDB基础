
链接：https://zhuanlan.zhihu.com/p/601669117
什么是mongodb？，有什么优势？
MongoDB 是一个基于 分布式文件存储 的开源 NoSQL 数据库系统，由 C++ 编写的，是一款非常流行的 文档类型数据库 。
在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性

mongodb存储结构
文档（Document） ：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。
集合（Collection） ：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。
数据库（Database） ：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。

优势：
MongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。


特点：
支持多种查询方式 ：MongoDB 查询 API 支持读写操作 (CRUD)以及数据聚合、文本搜索和地理空间查询。
支持 ACID 事务 ：MongoDB 就支持事务。与关系型数据库一样，MongoDB 事务同样具有 ACID 特性。MongoDB 单文档原生支持原子性，也具备事务的特性，MongoDB 4.2 引入了分布式事务，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。
高效的二进制存储 ：存储在集合中的文档，是以键值对的形式存在的BSON = Binary JSON
自带数据压缩功能 ：存储同样的数据所需的资源更少
支持多种类型的索引 ：MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合
支持分片集群 ：MongoDB 支持集群自动切分数据，让集群存储更多的数据，具备更强的性能。在数据插入和更新时，能够自动路由和存储
支持存储大文件 ：MongoDB 的单文档存储空间要求不超过 16MB。对于超过 16MB 的大文件，MongoDB 提供了 GridFS 来进行存储，通过 GridFS，可以将大型数据进行分块处理，然后将这些切分后的小文档保存在数据库中。


存储引擎：
MongoDB 采用的也是 插件式的存储引擎架构，MongoDB4.x 版本不再支持 MMAPv1 存储引擎
WiredTiger 存储引擎 ：自 MongoDB 3.2 以后，默认的存储引擎为 WiredTiger 存储引擎 。非常适合大多数工作负载，建议用于新部署。WiredTiger 提供文档级并发模型、检查点和数据压缩（后文会介绍到）等功能。
In-Memory 存储引擎 ：In-Memory 存储引擎在 MongoDB Enterprise 中可用。它不是将文档存储在磁盘上，而是将它们保留在内存中以获得更可预测的数据延迟。

WiredTiger 基于 LSM Tree 还是 B+ Tree？
自 MongoDB 3.2 以后，默认的存储引擎为WiredTiger 存储引擎。在 WiredTiger 引擎官网上，我们发现 WiredTiger 使用的是 B+ 树作为其存储结构
此外，WiredTiger 还支持 LSM(Log Structured Merge) 树作为存储结构，MongoDB 在使用WiredTiger 作为存储引擎时，默认使用的是 B+ 树。


MongoDB 聚合
实际项目中，我们经常需要将多个文档甚至是多个集合汇总到一起计算分析（比如求和、取最大值）并返回计算后的结果，这个过程被称为 聚合操作

MongoDB 提供了哪几种执行聚合的方法？
聚合管道（Aggregation Pipeline） ：执行聚合操作的首选方法。
单一目的聚合方法（Single purpose aggregation methods） ：也就是单一作用的聚合函数比如 count()、distinct()、estimatedDocumentCount()。
绝大部分文章中还提到了 map-reduce 这种聚合方法。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 聚合管道。聚合管道提供比 map-reduce 更好的性能和可用性。

聚合原理： 聚合管道由多个阶段组成，每个阶段在文档通过管道时转换文档。每个阶段接收前一个阶段的输出，进一步处理数据，并将其作为输入数据发送到下一个阶段。

常用的聚合操作符
match：根据某些字段筛选过滤
sort：用于根据一个或多个字段对文档进行排序
limit:限制操作符，用于限制返回文档的数量  
count用于跳过指定数量的文档
skip:用于跳过指定数量的文档
group:用于跳过指定数量的文档，根据字段分组
unwind拆分操作符，用于将数组中的每一个值拆分为单独的文档
lookup	连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于 populate


mongodb事务：
从MongoDB 4.2开始，多文档事务支持副本集和分片集群，其中：主节点使用WiredTiger存储引擎，同时从节点使用WiredTiger存储引擎或In-Memory存储引擎。在MongoDB 4.0中，只有使用WiredTiger存储引擎的副本集支持事务。
在MongoDB 4.2及更早版本中，你无法在事务中创建集合。从 MongoDB 4.4 开始，您可以在事务中创建集合和索引。有关详细信息，请参阅 在事务中创建集合和索引。


mongodb集群：
复制集群（副本集群）
架构类似于mysql主从架构：一主多从，还包含一个仲裁节点用于选举。默认主节点负责读写，也可以更改配置，主负责写，从负责读，但是不建议，因为数据同步有一定的延迟性。
主从复制通过oplog来完成的，类似mysql的binlog，
oplog用来保存写操作的增量日志，结构类似一个定长的队列，新写入的日志追加到队列尾，当队列满了之后，会自动覆盖最久的数据，oplog利用顺序写比随机写速度快

分片集群
