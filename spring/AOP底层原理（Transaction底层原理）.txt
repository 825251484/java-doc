⚫spring AOP底层原理
1. AspectJAwareAdvisorAutoProxyCreator 继承 AbstractAutoProxyCreator
2. AbstractAutoProxyCreator实现了BeanPostProcessor
3. AbstractAutoProxyCreator类中postProcessAfterInitialization方法，在执行这个方法之前，bean已经完成初始化，完成了依赖注入后，才会执行
4. postProcessAfterInitialization() 
	-> wrapIfNecessary() 
		-> 1.getAvicesAndAdvisorsForBean() ->  // 查找对代理类相关的advisor对象集合,获取该bean需要增强的advices和advisor
		   2.createProxy() // 创建ProxyFactory代理工厂，并设置一些参数，把上面获取的增强类集合放入工厂中，并且会判断proxy-target-class属性，默认是false，如果是true就会使用CGLIB代理，来创建代理对象
				-> ProxyFactory#getProxy(getProxyClassLoader()); // 通过代理工厂创建代理类  【getProexy{Return createAopProxy().getProxy(classLoader)}】
					-> ProxyCreatorSupport#createAopProxy() // 该方法中会获取AopProxyFactory类，通过该类的子类DefaultAopProxyFactory#createAopProxy()去创建代理类
						-> 执行 new JdkDynamicAopProxy() 或者 new ObjenesisCglibAopProxy(config) // 这两个类继承了AopProxy 创建代理类以后通过 AopProxy#getProxy()来获取代理对象
						// 方法中默认调用new JdkDynamicAopProxy() ，如果目标类是接口 || 或者是Proxy的子类使用JDK代理（JDK代理需要继承Proxy）。以上判断均不符合且proxy-target-class=true，则使用CGLIB代理
						// JdkDynamicAopProxy通过执行Proxy.newProxyInstance创建代理类，JdkDynamicAopProxy实现了InvocationHandler



⚫AOP底层原理 || @Transaction底层原理 || 拦截器原理？
1.首先会在创建bean的时候生成代理类。通过ProxyFactory代理工厂创建代理对象，并且会把增强类集合（拦截器链）放入代理工厂，默认使用JDK代理，如果配置了参数使用proxyTargetClass=true，但是目标类是接口或者继承Proxy，然后使用jdk代理，否则才使用cglib代理
2.在执行方法的时候，根据代理不同，会触发拦截器，拦截该方法，
	CGLIB代理时：
		CglibAopProxy类中的内部类DynamicAdvisedInterceptor#intercept方法，
			-> List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass); // 获取拦截器链（从代理工厂中获取增强类集合（大家都叫拦截器链））
				-> new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy)  .proceed(); 
					1.第一部分：会执行CglibMethodInvocation构造器，同时在构造器内部调用父类的构造器（ReflectiveMethodInvocation.clsaa），初始化父类参数，把自增系数和拦截器链封装到父类中，（这里拦截器，包括前置、后置、异常通知等拦截器）
					2.第二部分：调用父类实例方法：proceed() // 这个方法中会递归执行每一个拦截器，，每执行一个拦截器自增系数+1，直到自增系数等于拦截器链的数量，递归结束。调用目标方法。
								这其中就包括TransactionInterceptor事务拦截器。该拦截器用来处理数据库的操作：开启事务，提交或者回滚事务
	JDK代理：同上述方法类似
		JdkDynamicAopProxy.invoke()，调用方法时会触发该方法，
			-> List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass); // 获取拦截器链（从代理工厂中获取增强类集合（大家都叫拦截器链））
				-> invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);
					-> retVal = invocation.proceed();
					该方法invoke()，直接初始化 new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain)对象，调用proceed()

也就是创建代理对象时，会注册拦截器获取该bean相关的拦截器。并创建拦截器，
通过AfterReturningAdviceAdapter、MethodBeforeAdviceAdapter、ThrowsAdviceAdapter都实现了AdvisorAdapter 类中的getInterceptor()方法（interceptors.add(adapter.getInterceptor(advisor));）
而该方法中就是通过new来创建三个拦截器：AfterReturningAdviceInterceptor、MethodBeforeAdviceInterceptor、ThrowsAdviceInterceptor（这三个拦截器实现了MethodInterceptor）
并且会传入一个Advice对象实例， 那么该实例就是在执行前置后置等处理时，调用的前置后置方法的实例、以下就是在proceed()执行时，执行前后置处理真正的拦截器中的逻辑

									advice
									   |
			  		(前置)BeforeAdvice			AfterAdvice(后置、异常)
						|						|
					MethodBeforeAdvice#before		 AfterReturningAdvice#after
			

MethodInvocation类中的proceed()方法付责递归执行拦截器链，
MethodInterceptor在invoke方法付责执行织入的代码片段

相关文章：
https://zhuanlan.zhihu.com/p/383829479
https://www.cnblogs.com/chihirotan/p/7146586.html


⚫@Transaction原理
在proceed()方法中会调用TransactionAspectSupport#invokeWithinTransaction()，该方法主要流程：
createTransactionIfNecessary方法创建了TransactionInfo对象，设置传播行为、隔离级别、手动提交(autoCommit=false)，绑定事务信息到当前线程中。我们本次要分析的重点对象newTransaction标识位就在这个方法中设置值的。
proceedWithInvocation方法，主要执行目标对象方法。
completeTransactionAfterThrowing，见名知意，在目标对象方法出现异常后，判断是否进行回滚处理。
cleanupTransactionInfo方法主要清除当前线程绑定的事务信息。
commitTransactionAfterReturning，这个方法主要用来提交事务。



⚫TransactionSynchronizationManager.registerSynchronization(after()->{ 事务提交后执行 })
A掉B，
1：如果默认传播机制require，那么C报错不会回滚，且不会影响A
底层是先把A事务提交，持久化了，然后回调会调用一个回调方法afterCommit，所以不会影响A事务
2：如果是require_new传播机制，C报错会回滚，且不会影响A。，因为C的事务继承了A的事务，但是A的事务提交了，所以造成C的事务失效。所以不会回滚
在底层会根据事务传播机制进行判断，如果是require_new则会在回调方法中调用C的时候，创建一个新得事务，
链接：https://juejin.cn/post/6844903977797025806


⚫@Transaction传播机制
PROPAGATION_require：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
PROPAGATION_supports：支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_mandatory：使用当前的事务，如果当前没有事务，就抛出异常。
PROPAGATION_require_new：新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_never：以非事务方式执行，如果当前存在事务，则抛出异常。
PROPAGATION_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。


⚫@Transaction失效场景
1、@Transactional 应用在非 public 修饰的方法上
2、同一个类中方法调用，无论是public还是private，都会导致@Transactional失效，AB同一个类，A无事务，B有事务，A调B，B事务也会失效，因为没有走代理，
3、rollbackFor参数设置错误，只回滚：Error的子类（OOM，StackOverFlowError）或者RuntimeException子类才能回滚
4、catch住异常没有抛出
5、调用非public修饰的方法

如果@Transaction隔离级别和数据库不一致，会报错：IllegalTransactionStateException


⚫为什么@Transaction只对public修饰的方法生效？
	如果使用jdk代理：jdk本身只能代理实现接口的类，那么实现接口本身就是public abstract修饰的方法。
	如果是cglib代理：在执行代理时，会触发TransactionInterceptor事务拦截器执行invoke方法，该方法中调用invokeWithinTransaction() 
		-> tas.getTransactionAttribute(method, targetClass) 
			-> computeTransactionAttribute(method, targetClass);
				-> if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {return null;}
	该方法中对方法权限做了限制，我理解的是因为。private修饰本身就代理不了   protect：本身生成代理就是为了给其他类调用，而protect限制了权限，只能同胞或者子类调用，生成代理类就没有了意义，还有就是与jdk代理保持一致
