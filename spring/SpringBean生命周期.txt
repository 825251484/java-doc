getBean()

1.在bean实例化之前，先执行
	resolveBeforeInstantiation{
		applyBeanPostProcessorsBeforeInstantiation
		bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);  // 尝试去获取代理对象，看是否是@Aspect修饰的AOP类，
		if (bean != null) {
			bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);  //如果需要代理，那么去创建一个代理类返回
		}
	}

2. doCreateBean(beanName, mbdToUse, args);
	1.createBeanInstance实例化bean，首先supplier是1.8提供的函数式接口获取对象（该方法不用反射去创建对象，所以更高效，以下方式均需要反射），  再通过工厂方法去获取bean的实例（配置factory-method）。
		以上都没配置，那么通过构造方法实例化，先判断有没有缓存，从RootBeanDefinition 中的 resolvedConstructorOrFactoryMethod 属性中获取缓存，没有缓存，多个构造方法根据参数列表来判断使用哪个，
		如果没有推断出使用有参构造，那么就是使用默认的无参构造实例化对象
	2.applyMergedBeanDefinitionPostProcessors，这个方法就是对实例化后的bean进行一些后置处理其中包括@Resource@Autowired@PostConstruct一些处理
	3.addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));， 循环依赖的处理
	4.populateBean(beanName, mbd, instanceWrapper);属性填充
		1. /** 这里是对 bean的属性最后一次修改， 采用职责链的方式对所有实现了InstantiationAwareBeanPostProcessor的后置处理器调用，
			直到某个InstantiationAwareBeanPostProcessor在postProcessAfterInstantiation中返回了false，直接中断循环，看代码，这里返回的都是true，程序员，可自行实现方法 **/
			for (BeanPostProcessor bp : getBeanPostProcessors()) {
					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
					if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
						continueWithPropertyPopulation = false;
						break;
					}
			} 
		2. /**如果给一个类设置了( @Bean(autowire = Autowire.BY_NAME)) : AUTOWIRE_BY_NAME 和 AUTOWIRE_BY_TYPE, 
			那么类中的属性, 会根据规则自动注入, 而不需要@Autowired或@Resource了，默认情况下, 是 AUTOWIRE_NO, 所以这里默认是不执行 **/
			autowireByName(beanName, mbd, bw, newPvs);
			autowireByType(beanName, mbd, bw, newPvs);
			
		3./**这里也是调用的实例化后的后置处理器, 只是调用的方法不一样，这里会进行 @Autowired 和 @Resource 的注入工作 **/ 文章：https://www.cnblogs.com/elvinle/p/13384328.html
			 for (BeanPostProcessor bp : getBeanPostProcessors()) {
				pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
			 }
	5.initializeBean(beanName, exposedObject, mbd);  // bean初始化第三步：调用初始化方法，完成bean的初始化操作（AOP发生在此步骤）
		1. /** Aware 是一个空接口，具体的接口定义由子类实现，通常用于属性设置。比如BeanNameAware（setBeanName），ApplicationContextAware（setApplicationContext）。功能的实现主要在invokeAwareMethods方法中。
			主要作用就是可以从bean中获取beanName或者容器*/
			invokeAwareMethods(beanName, bean);
		2. applyBeanPostProcessorsBeforeInitialization  //判断是否需要生成代理对象
		3. invokeInitMethods(beanName, wrappedBean, mbd);  
			1. 如果是InitializingBean接口的实现类，调用InitializingBean接口的afterPropertiesSet方法，则先初始化InitializingBean的实现类
			2. 或者初始化<bean>标签对应的init-method属性中的方法  或者@Bean(initMethod=''))
		4. applyBeanPostProcessorsAfterInitialization  //AOP代理对象生成

	6.registerDisposableBeanIfNecessary(beanName, bean, mbd);  对bean的检查。看是否再创建中，不在则销毁bean
	
	7.在容器关闭时，如果实现了DisposableBean的destroy()，那么会执行销毁前逻辑，