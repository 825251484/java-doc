▪️什么是DDD
领域驱动设计（Domain-Driven Design，简称DDD）是一种软件开发方法论，由Eric Evans在其2003年出版的《领域驱动设计》一书中首次提出。它强调以业务领域为核心，通过建立领域模型来指导复杂软件系统的设计与开发。


▪️典型DDD分层结构
  用户界面层（Presentation）
  应用层（Application）
  领域层（Domain）
  基础设施层（Infrastructure）


▪️核心概念
1、战略设计（Strategic Design）
  限界上下文（Bounded Context）：定义模型适用边界的显式边界
  上下文映射（Context Mapping）：描述不同限界上下文之间的关系
  核心子域（Core Domain）：业务中最具竞争力的部分

2、战术设计（Tactical Design）
  实体（Entity）：具有唯一标识的对象
  值对象（Value Object）：通过属性而非标识定义的对象
  聚合（Aggregate）：一组相关对象的集合，有明确的边界和根实体
  领域服务（Domain Service）：不适合放在实体或值对象中的领域逻辑
  仓储（Repository）：提供聚合根持久化的抽象
  工厂（Factory）：负责复杂对象的创建逻辑


▪️如何应用DDD？
1. 识别核心领域
  与业务专家深入交流
  识别业务中最复杂、最具价值的部分
  区分核心域、支撑子域和通用子域
2. 划分限界上下文
  根据业务功能划分边界
  明确每个上下文的责任
  定义上下文间的集成方式
3. 建立领域模型
  识别实体、值对象和聚合
  定义领域服务
  建立仓储接口
4. 实现技术细节
  选择合适的技术架构
  实现持久化机制
  设计API接口
