容器化部署前身：
1.虚拟机部署：一个宿主机上运行多个虚拟机。每个虚拟机有自己的系统，每个虚拟机上在部署应用。根据应用大小设置虚拟机的资源，cpu和内存。
因为有操作系统。占用内存很多，浪费资源，同时扩容，缩容时虚拟机不方便。由此单程了容器化部署
	 传统部署，下载一个安装包。安装，然后启动运行，修改文件等等。利用docket直接拉取镜像，镜像中包含依赖包等等。直接把镜像运行再容器上即可
2.容器化部署：docket由此诞生，应用部署在容器中，容器中没有操作系统。占用资源少，启动快速，而且伸缩方便。根据应用的并发量，控制实例的数量，做应用伸缩工作

那么容器是通过镜像运行起来的。镜像中包含：应用程序包，依赖环境，相关包。
便于打包分发
节省资源，启动迅速

容器：容器是独立的。互相之间隔离的。每个容器有自己独立的ip，好像一个独立的机器一样。
原理：
namespace做的隔离：mnt：文件系统隔离，独立的文件系统，net：网路隔离，pid user uts ipc：进程号隔离。用户隔离，自己有自己的用户名，主机名。
Cgroups限制：cpu，内存限制在自己的容器中，可以对每个容器设置几何cpu以及使用多大内存等等，也就是对资源进行限制


docker命令：
docker images：列出镜像（Repository ：镜像所在仓库名称，Tag ：镜像版本，Image ID ：镜像 ID，Created ：镜像创建时间，Size ：镜像大小）
docker search：搜索镜像
docker build -t nginx:1.0 -f docketfile：创建一个镜像， -t设置一个镜像标签名称，f：指定一个文件创建镜像。文件中拉去ngnix镜像
docker run -d ngnix:1.0 -p ：运行容器。-d：后台运行，-p指定一个端口，运行以后会打印出容器id
docket ps：查看运行的容器


docket中默认的镜像位置是dockethub仓库


镜像操作：
1.可以通过命令拉取pull仓库中的镜像。同时也可以把我们自己的镜像推送push到仓库中
2.通过docket build创建镜像
3.可以打成压缩包，然后通过load -i运行压缩包   save -o？？

容器操作：
docket exec -it redis sh ：exec就是进去容器内，可以对容器内应用进行一些操作
exit退出容器
docket logs redis：查看容器运行日志
docket ps -a：可以查看退出状态（运行失败的）和运行状态的所有容器
docket port查看容器端口，容器内部端口：和对外暴露的端口
docket stop：停止容器，停止后docket ps -a才可以查看到容器
docket start：运行容器
docket rm：删除容器
docket cp：容器内外拷贝
docket 

docket 声明周期：create， start，stop，rm删除

