
线性结构：
⚫数组、多维数组定义，数组反转-首位交换
⚫字符串反转
⚫链表创建、增删改查，头节点要记住（记住原来重要节点），移动时要声明一个指针，链表反转：单向链表反转，从尾，往头插入
⚫队列，先进先出，怎么创建一个队列：1.数组队列：要实现入队出队操作，还要定义对头，对尾，入队元素要在对尾，环形对列？线程安全的环形队列   生产者消费者
⚫栈，先进后出，一种线性表数组结构，是一种只允许在表的一端插入和删除的线性表，创建一个栈： 栈顶、栈底，入栈，出栈基本特性，判断栈是否为空，是否为满，初始化栈，删除，插入，获取栈顶元素，可以通过数组或者链表实现
	栈可以实现数据反转


⚫树的分类：
1、普通二叉搜索树BST，
2、平衡二叉搜索树：1️⃣平衡二叉树（AVL树），2️⃣红黑树


⚫平衡二叉树（AVL）
特点：左右子树高度相差不超过1，通过左旋右旋维护树的平衡
时间复杂度：增删查都为Ologn，旋转时间复杂度：ologn。为什么旋转需要logn？：插入/删除后可能需要从操作点回溯到根，逐层检查平衡因子，最坏情况下，每次操作需要 O(logn)次旋转（例如，从叶子到根的路径均失衡）。
使用场景：查询效率比较高，适合读多写少的场景，增删需要旋转，开销较大

⚫红黑树：
特点：每个节点不是黑就是红，跟节点和叶子节点都为黑色，红节点的子节点必须为黑色，每条路径中黑节点数量相同（最长路径不超过最短路径2倍）。
时间复杂度：增删查都是Ologn，旋转复杂度O1，为什么是o1：红黑树的平衡规则（如“红节点不能连续”）通过局部调整（变色+有限旋转）即可恢复平衡，无需像AVL树那样从插入点回溯到根。
使用场景：插入/删除效率更高（适合频繁写操作），红黑树在插入时，若遇到“红父+红叔”情况，只需翻转颜色（父、叔、祖父节点变色），无需旋转。查询稍慢于AVL树，但实际性能接近。

⚫为什么红黑树查询稍慢于avl树？
avl树左右子树相差最多1，所以平衡性更好，因为查找的性能和树的高度相关，红黑树是最长路径小于等于最多路径的2倍，是比较宽松的平衡，所以红黑树的高度可能比avl树的高度更高，导致查询稍慢于avl树。
⚫为什么红黑树增删优于avl树？
红黑树的平衡规则（如“红节点不能连续”）通过局部调整（变色+有限旋转）即可恢复平衡，无需像AVL树那样从插入点回溯到根。

⚫二叉搜索树（BST）
特点：任意节点的左子树所有节点值 < 该节点值，右子树所有节点值 > 该节点值（假设无重复值），若插入数据有序（如升序/降序），会退化成链表（树高=节点数，操作效率降至 O(n)）。

⚫平衡二叉搜索树：avl树，平衡树


⚫堆：
特点：堆总是一棵完全二叉树，即除了最底层外，其他层都被完全填满，且最底层从左到右填充，且满足堆性质（父节点值≥或≤子节点值）
分类：
	最大堆：每个节点的值都大于或等于其子节点的值（根节点最大）
	最小堆：每个节点的值都小于或等于其子节点的值（根节点最小）
时间复杂度：
	插入元素（Insert）：O(log n)
	删除堆顶元素（Extract）：O(log n)
	获取堆顶元素（Peek）：O(1)
	堆查找（Heapify）：O(n)，堆一半用来获取极值，但是左右大大小顺序是无法保证的，必须遍历所有元素，并不能使用二分查找，所以还是使用二叉搜索树适合查询-二分查找
使用场景：
	优先队列：堆是实现《优先队列》的高效数据结构，每次弹出优先级最高的元素（极值先出）。相比较于普通队列：是先进先出的原则，数据结构是数组或者链表
		关键区别："普通队列"只关心元素的插入顺序，而"优先队列"需要动态维护元素的优先级顺序，堆正是为此优化的数据结构。
	堆排序：利用堆进行排序，时间复杂度为O(n log n)
	求Top K问题：维护一个大小为K的堆来高效获取前K大或前K小的元素
实现：
	堆通常使用数组来实现，因为完全二叉树的特性非常适合数组存储：
	对于数组中位置 i 的节点：
	父节点位置：parent(i) = (i-1)//2
	左子节点位置：left_child(i) = 2*i + 1
	右子节点位置：right_child(i) = 2*i + 2
其他：
	不存在”普通堆“的说法，普通堆就是一个完全二叉树，没有任何意义。堆只有大根堆和小跟堆的说法
	完全二叉树不是二叉搜索树，只是有树的结构而已，用于：二叉堆、优先队列、数组存储优化
	完全二叉树本身无值约束，但加上堆性质后即成为优先队列的常用实现


⚫栈的特点：


链表、数组的创建，增删改查，反转必须学会


数组的排序：
冒泡、选择、插入、快速
利用堆进行排序，时间复杂度为O(n log n)



锁：打印abc各十次？
