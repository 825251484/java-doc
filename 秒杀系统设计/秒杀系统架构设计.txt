⚫对系统中读操作的优化：
1.服务器端（服务tomcat，undertow）优化实现
2.jvm线上调优实现
3.分布式优化
4.数据库连接池压力测试优化
5.多级缓存（如下）


⚫在系统中可以使用那些缓存：
1、http缓存
2、cdn缓存
3、nginx缓存
4、堆内存缓存：只缓存热点数据，jvm进程级别缓存，jvm内部；jvm内存资源非常宝贵的，并且脏数据不敏感(会与脏读的问题，放热点数据，不修改的数据)，可以用map实现，但是无法设置过期时间，可以使用：guacache 实现缓存过期时间设置
5、分布式缓存：Redis实现分布式缓存： AP模型
6、接入层缓存：openresty+lua实现的缓存


⚫多级缓存实现：
	openresty-lua + redis + jvm堆内存（堆内存可以使用guacache可以设置过期时间）
	1.先访问openresty内存字典，如果内存字典命中，那么就返回数据
	2.如果数据没命中，那么直接和redis进行交互，通过lua脚本获取redis中的数据，
	3.如果redis没命中数据，那么在访问后台服务
	减少后台服务压力
	之所以这么设计的原因：是因为openresty强大的高并发处理能力，是一款基于ngnix与lua高性能web平台，内部集成了大量精良的lua库，第三方模块以及大多数依赖项
	采用lua+redis方式进行缓存，是因为lua可以构建满足超高并发的访问需求，并且处理速度极高


⚫什么是OpenResty?
OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。
三大特性：详尽的文档和测试用例，同步非阻塞，动态：你可以在不重启 OpenResty 的前提下，修改业务的处理逻辑
重点：
	同步非阻塞的编程模式；
	lua使用方法；
	性能优化；
安装：进入到 openresty_for_windows_1.7.10.2001_64bit 目录，双击执行 nginx.exe 或者使用命令 start nginx 启动 nginx，如果没有错误现在 nginx 已经开始运行了。


⚫压测标准：
QPS: 每秒钟处理完请求的次数；具体是指发出请求到服务器处理完成功返回结果。
TPS：每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。
并发量：系统能同时处理的请求数
RT：响应时间，处理一次请求所需要的平均处理时间
计算关系：
  QPS = 并发量 / 平均响应时间
  并发量 = QPS * 平均响应时间

	
⚫秒杀设计思路
前提： 一系列验证工作（身份信息，token,手机号……）
	1、查询库存是否存在（是否存在秒杀的商品），是否上架，活动是否开始，可以查数据库，也可以把商品信息提前放入redis缓存，然后直接查缓存，这样可以提高效率
	2、扣减库存(redis扣减)
	3、更新库存(mysql扣减，采用异步消息队列，发送事务型消息，可以保证下单成功了，才进行消费扣减，保证原子性)
	4、下单实现（）
面临问题：
	1、如何保证库存在高并发情况下，不会出现超卖的问题
	2、如何保证下单在高并发情况下，性能问题
	3、在高并发模式下，数据一致性问题如何保证

1.如何防止超卖？
	超卖的原因：在并发模式下，多线程读到相同的库存，导致超卖现象
	解决方案：
		1.队列：队列的长度是商品的个数，队列中存储的数据是每个商品的id，一个数量的商品对应一个队列，卖几个就pop出队几个，
		2.加锁：单机模式下用lock，分布式系统用分布式锁：redis锁，zk锁，mysql数据库锁
			问题：任何锁都会导致性能下降，无论是什么锁，高性能的锁，单机锁，分布式锁，总之锁都会导致业务进行排队等待，
			1）单机lock锁：在单机部署时，我们可以使用lock锁来解决
				流程：
					-- lock.lock();
					1.从数据库查询商品数据
					2.校验数据
					3.更新库存
					4.保存订单
					-- lock.unlock();
				问题：这种加锁是存在问题的，因为在释放锁之后。事务还没有提交，这个时候另一个线程查询的库存还是旧库存，这样也会导致超卖
				解决：必须等事务提交以后再释放锁，通过锁的上移来解决这个问题，
					1.创建一个自定义注解，该注解作为切入点，放在需要加锁的方法上(@Target:应用在方法上，@Retention(RetentionPolicy.RUNTIME)由JVM 加载)
					2.再定义一个@Aspect切面类，(@order(1)该注解代表加载顺序最优)
					3.切面类中创建一个切入点，就是拦截被标识自定义注解的的方法，
					4.同时创建一个@Around方法，也就是执行业务的方法，该方法的前后执行加锁解锁操作。中间执行我们的业务逻辑
			2）分布式锁：redis锁、zk锁原理一致
				流程：
					-- boolean succ = RedissLockUtil.tryLock("seckill_redis_lock_" + killId, TimeUnit.SECONDS, 3, 10);  参数：key，时间单位，等待时间，锁释放时间
					1.从数据库查询商品数据
					2.校验数据
					3.更新库存
					4.保存订单
					-- RedissLockUtil.unlock("seckill_redis_lock_" + killId);
				问题：同样该方法同样存在，锁和事务冲突的问题
				解决：锁上移，AOP方式加锁
			3）数据库锁（mysql锁）
				1.悲观锁
					实现：
						查询库存：select * from tb_seckill_goods where id = #{seckillId} for update
						更新库存：UPDATE tb_seckill_goods SET stock_count=stock_count-1 WHERE id=#{seckillId} AND stock_count>0
					原理：在查询库存的时候会加锁操作，加锁以后这条数据只有一个线程可以操作，也就是查询出来的数据是新的库存信息，同样在更新库存，mysql会自动加锁。同时在sql条件中添加库存大于0，那么也就不会出现超卖的现象
						  如果购买的数量是前端穿过来的，那么该数量要用volatile修饰
				2.乐观锁：
					实现：UPDATE tb_seckill_goods SET stock_count=stock_count-1,version=version+1 WHERE id = #{seckillId} AND version = #{version}
						  在库存表添加version字段,更新的时候判断版本是否匹配
					问题：如果更新失败，那么该用户就直接返回秒杀失败。而不会一直阻塞，等待锁的释放，即使有库存，那么该用户也会返回失败。只能重新下单。
	思考：以上处理是可以实现秒杀场景的，但是在加锁会严重影响性能，因此考虑在不加锁的情况下，可不可以实现秒杀，同时防止超卖，并且保证数据一致性

2.如何提高性能？
	原因：高并发模式，数据压力比较大
	优化思路：可以在秒杀前几天，把秒杀商品放入redis中，秒杀开始从缓冲中获取商品，利用 redis原子性操作模式，防止库存超卖现象，同时不用加锁，
	实现：
		1.TbSeckillGoods seckillGoods = (TbSeckillGoods) redisTemplate.opsForValue().get("seckill_goods_"+killId); // 从redis中查询缓存，比查询db快很多
		2.
		private boolean reduceStock(Long killId) {
				// 直接扣减redis库存，利用redis原子性操作
				Long res = redisTemplate.opsForValue().increment("seckill_goods_stock_" + killId, -1);
				if(res >=0){
					//发送消息
					boolean succ = producer.asncSendMsg(killId);
					if(!succ){
						return false;
					}
					return true;
				}else{
					// 失败，库存回滚
					redisTemplate.opsForValue().increment("seckill_goods_stock_" + killId, 1);
					return false;
				}
			} //利用increment方法扣减库存。，这个方法是原子操作，扣减成功发送消息，异步更新数据库，没有了数据库的操作，大大的提高了性能，扣减失败，说明库存数据已经变成负数，需要把扣减的库存在加回来。
		3.
			1.添加队列：Boolean produce = SeckillQueue.getMailQueue().produce(order); // 订单异步操作：下单数据放入队列中。然后从队列中获取数据，插入订单数据
			2.消费队列：
				 TbSeckillOrder kill = SeckillQueue.getMailQueue().consume();
                    if(kill!=null){
                        // 从队列中获取订单，执行下单操作
                        seckillService.startSubmitOrder(kill);
                    }
	问题：以上处理可以大大的提高秒杀的性能，但是存一个问题，就是扣减缓存中的库存和更新数据库中的库存不是原子操作，还有扣减库存和下单操作也不是一个原子操作。那么就会导致数据的不一致性的问题。


3.怎么保证数据的一致性？
	原因：因为整个操作秒杀不是原子操作，所以会导致数据不一致
	优化思路：CAP定理，在服务部署环境中，集群部署，分布式部署模型下，无法同时保证服务可用性，数据一致性，所以要么采用强一致性，用加锁，那么就会影响性能，要么就采用最终一致性，因为redis是AP模型，可以保证可用性，
			  但是不能保证数据的一致性，所以在兼顾的业务的实现下，来解决数据的一致性，只能采用最终一致性
	数据一致性问题分析：
		1.扣减库存（扣减的 redis）成功，但是下单失败了，此时下单操作可以进行事务回滚，但是 redis不能回滚库存的，出现了数据一致性问题
		2.扣减库存是缓存的库存，数据库库存没有发生变化 此时存在数据库的数据和缓存 中的数据一致性问题
		3.发送消息失败了怎么办？
		4.事务和消息
			本地事务执行失败，发送消息成功，导致数据一致性问题；
			本地事务执行成功，但是发送消息失败了，导致数据不一致的问题；
	解决方案：
		通过rocketmq的mq halfmessage半消息机制实现消息发送，同时保证数据一致性问题。
		原理：生产者向服务器broker发送half message，发送成功后，该消息不会发送给消费者，然后生产者执行本地事务，本地事务执行完，会有一个事务状态，生产者根据事务状态，向服务器再次发送消息，
			  服务器收到消息后根据事务状态，成功就将消息发送给消费者，失败就不会发送给消费者，一段时间后清除。如果生产者没有收到生产者二次确认的消息，那么服务器broker会回查事务处理结果
		实现：
			1.初始化生产者方法： @PostConstruct public void initProducer() {}
			2.该方法中注册一个事务消息监听器：producer.setTransactionListener(new TransactionListener() {}
			3.监听器中有两个方法：方法一：executeLocalTransaction()，执行本地业务方法，该方法涵盖事务，事务执行失败或者成功都要把事务状态落表，方法二：checkLocalTransaction()本地事务状态回查，查询表中的事务状态，然后返回事务状态
			4.控制层付责发送消息：创建一个线程池，目的是限流泄洪，生命20个线程，线程中发送半事务消息
			5.注入事务消息生产者发送半事务消息（半事务消息内容已经初始化）
			6.消费者执行扣减库存的操作

注意事项：
1.分布式锁可以解决：表单重复提交、重复刷单、app重复请求库存超卖。
2.无论是单机状态下的lock锁，还是分布式下的redis锁或者zk锁，都会存在与事务冲突的问题，也就是说A线程获取锁，执行完业务逻辑，但是还没有执行完方法，这个时候事务还没提交，B线程查询到的库存数，依然是之前的旧值，
所以要等事务提交之后在解锁，所以都要进行锁的上移（aop锁）。数据库锁是没有这种问题的，但是数据库锁性能不好，没有redis和zk分布式锁性能块
3.获取不到信号量就阻塞等待
4.redis是ap模型 保证系统的可用性，但是不能保证数据的一致性。我们可以采用最终一致性，但是如果采用强一致性，那么系统的性能就会下降，无法保证可用性
保证数据最终一致性：采用事务性消息，保证消息一定发送成功，如果多次发送失败，那就不是mq问题了，就要人工干预了。


⚫秒杀限流方案：
1.信号量限流：Semaphore
2.令牌桶：boolean res = rateLimiter.tryAcquire();
3.漏桶




⚫锁和事务的区别和关系：
锁：是应对在多线程模式下，防止共享资源出现并发修改的情况，锁为多线程而生
事务：一次回话，一个线程执行原子性的情况（一次回话，一个线程，一个事务单元，要么失败要么成功），事务的底层隔离性，也有用到锁排他锁


⚫自定义注解
@Documented：注解信息会被添加到Java文档中
@Retention：注解的生命周期，表示注解会被保留到什么阶段，可以选择编译阶段、类加载阶段，或运行阶段
@Target：注解作用的位置，ElementType.METHOD表示该注解仅能作用于方法上
