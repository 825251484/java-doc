⚫软件设计名词
OOD - Object-Oriented Design(面向对象设计)
OOM - Object-Oriented Method(面向对象方法)
OOA - Object-Oriented Analysis(面向对象分析)
OOP - Object-Oriented Programming（面向对象编程）


⚫HashMap空值怎么处理？
空值hashcode返回0，


⚫HashMap为什么是线程不安全？
1、 1.7中扩容采用的是头插法，会导致在多线程环境下，扩容时会造成环形链或数据丢失。
2、 1.8在多线程put时，如果计算出来的哈希值相同会产生数据覆盖的问题


⚫ConcurrentModificationException产生的原因？
	hashMap类中全局变量modCount，HashIterator抽象类中全局变量expectedModCount，
	最开始他们是同步的，但是我们在某些操作的过程中会导致 他们不一致，例如put，remove。会修改hashmap中的modCount。但是HashIterator中expectedModCount却没有发生变化。
	当增强for循环再次执行的时候，调用的却是HashIterator中的方法nextNode方法，这个方法中获取的就是HashIterator中expectedModCount，
	最终发现了数据不一致。这就是本例ConcurrentModificationException 产生的根本原因。
链接：https://juejin.cn/post/6844903569095671816


⚫反射调用私有方法有什么问题？
在我们的开发过程中，通常只有实体类（Entity）中的成员变量使用 private 修饰，并且会提供访问这些变量的 get 和 set 方法。
原则上要求不准定义私有的方法，我们使用 method.invoke(Object obj,Object args[]); 强制调用对象调用私有方法违反了我们 Java 中面向对象的特性。


⚫Java 中iterator和iterable的关系是怎样的？有何意义？
public interface Iterable<T> {
  Iterator<T> iterator();
}
public interface Iterator<E> {
  boolean hasNext();
  E next();
  void remove();
}
原因是实现了Iterable的类可以在实现多个Iterator内部类，例如LinkedList中的ListItr和DescendingIterator两个内部类，就分别实现了双向遍历和逆序遍历。
通过返回不同的Iterator实现不同的遍历方式，这样更加灵活。如果把两个接口合并，就没法返回不同的Iterator实现类了。


⚫String相关知识
1、String实现哪些类：public final class String implements java.io.Serializable, Comparable<String>, CharSequence
2、String类中的方法  
	copyValueOf：传入char[]，返回一个字符串，内部调用new String
	valueOf：调用Long.toString(l); 或者Integer.toString(i);  等等
  
  
⚫Arrays.copy()和System.arraycopy()区别
Arrays.copy()：Arrays.copyOf()方法返回的数组是新的数组对象，底层new了一个新的数组，原数组对象仍是原数组对象，不变，该拷贝不会影响原来的数组，如果新数组的长度超过原数组的长度，则保留数组默认值.
System.arraycopy() ：System.arraycopy(original, 0, copy, 0,Math.min(original.length, newLength));
		 参数说明：
			original：源对象
			0：源数组中的起始位置
			copy：目标数组对象
			0：目标数据中的起始位置
			length：要拷贝的数组元素的数量，原数组和新数组取最小


⚫怎么通过方法表判断继承关系
从class文件中提取出来并存储在方法区
方法区中存储着类的信息：类名，直接父类的完整有效名包+类名（如果是接口或者object没有父类），类的修饰符
域的信息：成员变量的修饰符（static，final，volatile，public等），名称，类型
方法信息：方法名，参数类型个数顺序，方法修饰符，方法返回类型，
运行时常量池
Class class3=Class.forName("impressive.bean.Article");
Class class1=Article.class;
Article article1=(Article)class1.newInstance();


⚫什么是单例？
1.私有构造
2.使用私有静态成员变量初始化本身对象
3.对外提供静态公共方法获取本身对象
单例对象实现有两种：懒汉式（延迟加载, 用的时候在new），饿汉式


⚫单例破坏有哪些？
单例破坏：（破坏都是获取calss对象来处理，而单例是获取对象的）
1.1反射破坏：反射可以访问私有的构造方法，通过反射获取默认的私有构造器，并改变其构造器的访问域，从而实现调用构造器来创建对象
1.2防止反射破坏解决方案：在构造器中添加标志位，用来判断构造器是否被调用过，阻止外部调用构造器
2.1序列化破坏：序列化时底层是通过反射获取object对象的构造器来创建对象的（不是通过序列化对象的构造器创建对象），然后把object的引用指向被序列化的对象，导致反序列化之后对象不是之前的对象了
2.2防止序列化被破坏解决方案：在单例类中实现一个readResolve()方法，并在这个方法中返回我们要的单例对象。（反序列化时底层会检测单例类中是否有该方法。如果有返回该方法中的对象）


⚫防止单例破坏？
防止单例破坏
枚举类，防止反射和序列化的破坏
public enum SingletonDemo {
    INSTANCE;
    public static SingletonDemo getInstance() {
        return INSTANCE;
    }
}


⚫自动装箱拆箱

⚫多线程的原理

⚫进程间如何通信

⚫线程是如何创建和销毁

⚫JAVA8,9,10,11,12新特性总结
java8函数式编程：https://juejin.cn/post/6844904184953700360
JAVA8特性：
  1、函数式接口：函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。：Runnable，Callable，Comparator
	Supplier<T> 生产者：无输入，生产一个T 类型的值；接口仅包含一个无参的方法:
	T get() 。用来获取一个泛型参数指定类型的对象数据
	Consumer<T> 消费者：输入一个T 类型的值，无输出；对给定参数执行消费操作
	Function<T,R> 函数：输入一个T 类型的值，返回一个R 类型的值；
	Predicate<T> 断言：输入一个T 类型的值，返回true/false
  2、lambda表达式：Lambda 它其实是匿名函数，通过约定好怎么传入参数，怎么返回参数，由编译器负责参数类型的猜测并执行结果
	new Thread(()->{System.out.println("快速新建并启动一个线程");}).start();
  3、Optional类：Optional 类的作用主要是为了解决空指针问题，通过对结果的包装，并使用方法来代替if 判断，为流式编程打下了良好的基础。
	        Optional<Object> o = Optional.ofNullable(null);
        	System.out.println(o.isPresent()); //打印：false 
  4、Stream 流式编程：Stream API 借助Lambda 表达式，提供串行和并行两种模式进行汇聚操作，并行模式parallelStream()能够充分利用多核处理器的优势，使用fork/join 来拆分任务和加速处理过程。并行有线程安全问题，同时stream提供了很多Stream API：concat,fiter,sorted,limit,foreach,reduce,count,min,findFirst,peek,distinct,toArrary,map操作（mapToLong等）
  5、方法引用(::双冒号操作符)
	Function<String, Integer> s = Integer::parseInt;
	Integer i = s.apply("10");
	Comparator<Integer> comparator = Integer::compare;
	int result = comparator.compare(100,10);
	规则：
	   返回类型：返回的类型是 Java 8 专门定义的函数式接口，这类接口用 @FunctionalInterface 注解。
	   参数：你的引用方法的参数个数、类型，返回值类型要和函数式接口中的方法声明一一对应才行。
	例如：以下两个方法都是一一对应的
	@FunctionalInterface
	public interface Function<T, R> {
	    R apply(T t);
	}
	public static int parseInt(String s) throws NumberFormatException {
	    return parseInt(s,10);
	}
  6、JDK8 新增了静态⽅法和默认⽅法
 默认方法子类可以选择实现，也可以不实现，为了提高的接口的使用性和扩展性，功能更类似于一个抽象类，
 静态方法子类不能直接调用，必须通过接口调用
  
JAVA9特性：
  1、目录变化：jvm启功时并非加载全部jar，减少启动时占用的内存
  2、接口私有化： JDK9 中新增了私有⽅法（JDK8 新增了静态⽅法和默认⽅法）
  3、集合加强：jdk9为所有集合（List/Set/Map）都增加了of 和copyOf 方法，用来创建不可变集合，即一旦创建就无法再执行添加、删除、替换、排序等，否则UnsupportedOperationException异常。
  4、Stream 方法增强：Stream 中增加了新的方法ofNullable、dropWhile、takeWhile 和iterate
  5、jshell 命令

JAVA10特性：
  1、局部变量类型推断JDK10 可以使⽤var 作为局部变量类型推断标识符，仅适⽤于局部变量

JAVA11特性：
  1、字符串加强： //去除首尾空格 strip();// 去除尾部空格 stripTrailing();// 去除首部空格 stripLeading()// 复制字符串 repeat(3)
  2、HttpClient API：，你可以在java.net 包中找到这个API它将替代仅适用于blocking 模式的HttpURLConnection，并提供对WebSocket 和HTTP/2 的支持。
  3、新一代垃圾回收器ZGC：

JAVA12特性：
  1、Switch：可以省去break
  2、Shenandoah GC新增了一个名为Shenandoah 的GC 算法，通过与正在运行的Java 线程同时进行evacuation（撤离） 工作来减少GC 暂停时间。使用Shenandoah 的暂停时间与堆大小无关，这意味着无论堆是200 MB 还是200 GB，都将具有相同的暂停时间
JAVA13特性：
  1、默认生成类数据共享归档文件：在同一个虚拟机上启动多个JVM 时，如果每个虚拟机都单独装载自己需要的所有类，启动成本和内存占用成本很高。所以java 团队引入了类数据共享机制（CDS），将一些核心类在每个JVM 中共享，使启动时间减少，JVM 内存占用减少。
  2、可中断的G1 混合GC：当G1 垃圾回收器的回收超过暂停时间的目标，能中止垃圾回收过程，目的是使用户能够设置预期的JVM 停顿时间。G1 将GC 回收集分为了mandatory（紧急）和optional（可选）两部分，若处理完mandatory 后的时间小于设置的预期时间则会继续处理optional。
  3、ZGC 取消提交未使用的内存：ZGC 从JDK11 中被引入进来，在进行GC 的时候保证更短的停顿时间，10ms 以下， 在JDK13 中新增了归还未提交，未使用的内存给操作系统
  4、文字块：将文本块添加至java 语言，多行字符串不需要转义，提高代码的可读性。
HTML 示例：String html = "<html> <boby> <p> hello world </p> </boby> </html>";
  5、switch增强，引入在块中引入了 yield 语句来返回值，而不是使用 break，而yield只会跳出当前Switch 块，同时在使用 yield 时，需要有 default 条件

JAVA17特性：
1.内部类中的方法可以访问外部类中私有变量
2.Switch 表达式增强，用lambda方式写switch语句
3.Sealed关键字 类和接口可以限制一个类或接口允许被哪些类继承或实现
4.基于内存的数据访问 API（Memory Access API）：使用 VarHandle 类来实现原子操作
5.改进了 G1 垃圾收集器的性能和稳定性


⚫java内部类分类及特点
非静态内部类会持有外部类的引用。是因为内部类的构造器会传入外部类的对象引用。从而才能访问外部类的数据
静态内部类。不需要持有外类的引用。因为只可以通过类访问静态成员
匿名内部类：
public class Outer {
    String string = "";
    void outerTest(final char ch){
        final Integer integer = 1;
        Inner inner = new Inner() {
            void innerTest() {
                System.out.println(string);
                System.out.println(ch);
                System.out.println(integer);
            }
        };
    }
    public static void main(String[] args) {
        new Outer().outerTest(' ');
    }
    class Inner {
    }
}
为什么匿名内部类使用局部变量和方法参数就需要被final修饰：为不让内部类改变内容，使其参数值产生差异。索然加上final不让你们改。
