1、ES支持RestFul形式的api
	restful就是对HTTP协议的诠释。
	1）资源定位
		使用url定位资源。
		http://www.xxx.com/item/13331123
	2）资源操作
		使用不同的http方法实现增删改查。
		增：put
		删：delete
		改：post
		查：get
2、索引库的管理
	{======================
	分片数：一个索引库分成多片，每片保存的数据是不同的。所有片的数据加到一起才是完整的索引库。
	副本数：每个分片有几个副本分片。副本就是备份分片。
	主分片和副本分片是不能放到一台服务器上的。

	集群的健康状态：
		绿色：非常健康。主分片和副本分片都成功分配正常工作。
		黄寺：亚健康状态。可以使用存在风险，有些片没有副本。
		红色：集群不可用状态。集群中分片不完整。
	=====================}
	1）创建索引库
		方法：
			put
		url：
			/{索引库的名称}
			例如：
			http://192.168.68.129:9200/hello
	2）创建索引库时同时设置参数
		{----------------
		1、settings参数可以设置分片数及副本数。
		2、mappings参数设置索引库中的type及type下面的field定义。
			ES5之前的版本：一个索引库下可以定义多个type。
			ES6：一个索引库中只能有一个type，名称可以自己定义。
			ES7：索引库中删除type的定义，默认type是“_doc”
		3、field包含三个属性：
			1）是否分析：是否需要对field的内容进行分词处理。如果分词需要使用
				“text”类型：分词
				“keyword”：不分词
			2）是否索引：分词之后一定需要创建索引。不分词也可以创建索引，把field的内容当做一个关键词添加到索引中。
						例如身份证号、商品编号、订单编号等。
			3）是否存储：业务中是否需要使用此field的内容。是否需要展示给用户看。不存储的设置不影响分词不影响查询。
		4、mapping一旦创建不能修改，只能添加field。如果文档中出现了mapping中没有的field，es会自动识别并创建field。

		-----------------}
		方法：
			put
		url：
			/{index}
		请求体：
			{
				"settings":{
					"index":{
						"number_of_shards": "3",
						"number_of_replicas": "1"
					}
				},
				"mappings":{
					"blog":{
						"properties":{
							"id":{
								"type":"long",
								"index":true,
								"store":true
							},
							"title":{
								"type":"text",
								"store":true
							},
							"content":{
								"type":"text",
								"store":true	
							}
						}
					}
				}
			}
	3）创建索引库后设置mapping
		方法：
			post
		url：
			/{index}/{type}/_mapping
		请求体：
			{
				"{type}":{
					"properties":{
						"id":{
							"type":"long",
							"index":true,
							"store":true
						},
						"title":{
							"type":"text",
							"store":true
						},
						"content":{
							"type":"text",
							"store":true	
						}
					}
				}
			}
	4）删除索引库
		方法：
			delete
		url:
			/{index}
--------------------------
今日暗号：我的大刀早已饥渴难耐
--------------------------
3、文档的管理
	1）添加文档
		方法：
			put、post
		url：
			/{index}/{type}/{_id}
			ES7：
			/{index}/_doc/{_id}
			例如：
			http://192.168.68.129:9200/hello3/blog/1
		参数：
			{
				"id":1,
				"title":"这是一个测试文章",
				"content":"这里是文章的内容部分"
			}
	2）修改文档
		和添加文档相同处理。
		如果添加的文档在索引库中不存在就是新增文档，如果添加的文档在索引库中存在那就做更新操作。
		更新原理是先删除后添加。判断文档是否相同根据“_id”判断。
	3）删除文档
		方法：
			delete
		url：
			/{index}/{type}/{_id}
	4）根据id取文档对象
		方法：
			get
		url：
			/{index}/{type}/{_id}
4、ES的查询操作
	1）api的使用
		方法：
			post
		url：
			/_search
			/{index}/_search
			/{index}/{type}/_search
		参数：
			{
				查询条件
			}
	2）查询全部文档
		{
			"query":{
				"match_all":{}
			}
		}
	3）termQuery
		{---------------
		在mapping中没有指定field使用什么分词器的情况下，默认使用标准分词器StandardAnalyzer。
		标准分词处理中文是一个汉字一个关键词。
		-------------}
		根据关键词查询，关键词必须是索引中存在的关键词。
		需要指定两个内容，一个是要查询哪个field，一个就是要查询的关键词。
		{
			"query":{
				"term":{
					"title":"测试"
				}
			}
		}
	4）query_string查询
		带分析的查询，可以把要查询的内容先分词，然后基于分词之后的结果查询。
		{
			"query":{
				"query_string":{
					"query":"今天要做ElasticSearch的测试",
					"default_field":"title"
				}
			}
		}
	5）bool查询
		组合条件查询，可以把多个条件组合到一起。
		must相对AND
		should：相对于OR
		must_not：相对于NOT

		{
		   "bool":{
		      "must":[],
		      "should":[],
		      "must_not":[],
		      "filter":[]
		   }
		}
5、中文分词器
	IKAnalyzer
	1）分词算法
		ik_max_word
		is_smart
	2）查看分词器的分词效果
		POST /_analyze
		{
			"analyzer":"standard",
			"text":"这是一个测试"
		}

		在设置mapping时指定field使用哪个分词器。
		如果想更新分词器，需要更新mapping，mapping不能更新，需重建索引。
	3)使用分词器
		{
			"mappings":{
				"blog":{
					"properties":{
						"id":{
							"type":"long",
							"index":true,
							"store":true
						},
						"title":{
							"type":"text",
							"analyzer":"ik_max_word",
							"store":true
						},
						"content":{
							"type":"text",
							"analyzer":"ik_max_word",
							"store":true	
						}
					}
				}
			}
		}